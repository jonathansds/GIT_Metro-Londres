package com.teste.londres.controllers;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import br.com.caelum.vraptor.Get;
import br.com.caelum.vraptor.Path;
import br.com.caelum.vraptor.Post;
import br.com.caelum.vraptor.Resource;

import com.teste.londres.algoritmo.Metro;
import com.teste.londres.algoritmo.Station;
import com.teste.londres.algoritmo.Trajeto;
import com.teste.londres.dao.EstacaoDao;
import com.teste.londres.dao.LinhaDao;
import com.teste.londres.dao.RotaDao;
import com.teste.londres.dao.impl.EstacaoDaoImpl;
import com.teste.londres.dao.impl.LinhaDaoImpl;
import com.teste.londres.dao.impl.RotaDaoImpl;
import com.teste.londres.entidades.Rota;
import com.teste.londres.models.RegistrosModel;
import com.teste.londres.utils.Constantes;

/**
 * @author Jonathan
 * @version 13/05/2014
 *
 */
@Resource
public class TrajetoController {
	/** estacaoDao */
	private final EstacaoDao estacaoDao;
	
	/** linhaDao */
	private final LinhaDao linhaDao;
	
	/** rotaDao */
	private final RotaDao rotaDao;
	
	/** metroLondres */
	private Metro metroLondres;
	
	
	
	
	/** menorCaminho */
	private List<Station> menorCaminho;
	
	/** naoVisitadas */
	private List<Station> naoVisitadas;
	
	/** estacaoAtual */
	private Station estacaoAtual;
	
	/** estacaoVizinha */
	private Station estacaoVizinha;
	
	/** caminho */
	private Station caminho;
	
	
	
	
	
	public TrajetoController(EstacaoDaoImpl estacaoDao, LinhaDaoImpl linhaDao, RotaDaoImpl rotaDao){
		this.estacaoDao = estacaoDao;
		this.linhaDao = linhaDao;
		this.rotaDao = rotaDao;
		
		metroLondres = new Metro();
		metroLondres.setEstacoes(estacaoDao.listAll());
		metroLondres.setLinhas(linhaDao.listAll());
		metroLondres.setLinhasDefinicao(rotaDao.listAll());
		
		metroLondres.define();
	}
	
	@Get
	@Path("/trajeto/trajeto")
	public RegistrosModel trajeto(){
		RegistrosModel model = new RegistrosModel();
		List<Integer> listaLinhas = new ArrayList<Integer>();
		Integer numeroLinha;
		
		for(Rota rota : metroLondres.getLinhasDefinicao()){
			numeroLinha = new Integer(rota.getLine());
			listaLinhas.add(numeroLinha);
		}
		
		model.setNumeroLinhas(listaLinhas);
		model.setStations(new ArrayList<Station>(metroLondres.getStations().values()));
		
		return model;
	}
	
	@Post
	@Path("/trajeto/definir")
	public Trajeto definir(Station estacaoOrigem, Station estacaoDestino, Integer linhaOrigem, Integer linhaDestino){
		List<Trajeto> trajetosDefinidos = metroLondres.getRotasDefinidas();
		
		for(Trajeto trajeto : trajetosDefinidos){
			if(trajeto.getEstacaoOrigem().getIdentificador().equals(estacaoOrigem.getIdentificador()) &&
			   trajeto.getEstacaoDestino().getIdentificador().equals(estacaoDestino.getIdentificador())){
				return trajeto;
			}
		}
		
		menorCaminho = new ArrayList<Station>();
		
		metroLondres.getStations().get(estacaoOrigem.getIdentificador()).setTempoDistancia(0);
		naoVisitadas = (List<Station>) metroLondres.getStations().values();
		menorCaminho.add(estacaoOrigem);

		Collections.sort(naoVisitadas);
		
		while(!naoVisitadas.isEmpty()){
			estacaoAtual = naoVisitadas.get(0);
			
			for(int x = 0;x < estacaoAtual.getEstacoesVizinhas().size(); x++){
				estacaoVizinha = estacaoAtual.getEstacoesVizinhas().get(x);
				
				if(!estacaoVizinha.getVisitada()){
					
					if(estacaoVizinha.getTempoDistancia() > (estacaoAtual.getTempoDistancia() + Constantes.TEMP_MIN_POR_ESTACAO)){
						estacaoVizinha.setTempoDistancia(estacaoAtual.getTempoDistancia() + Constantes.TEMP_MIN_POR_ESTACAO);
						estacaoVizinha.setEstacaoAnterior(estacaoAtual);
						
						if(estacaoVizinha.getIdentificador().equals(estacaoDestino.getIdentificador())){
							menorCaminho.clear();
							caminho = estacaoVizinha;
							menorCaminho.add(estacaoVizinha);
							
							while(caminho.getEstacaoAnterior() != null){
								menorCaminho.add(caminho.getEstacaoAnterior());
								caminho = caminho.getEstacaoAnterior();
							}
							
							Collections.sort(menorCaminho);
						}
					}
				}
			}
			
			estacaoAtual.setVisitada(true);
			naoVisitadas.remove(estacaoAtual);
			
			Collections.sort(naoVisitadas);
		}
		
		return null;
	}
}
